<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
    integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
  <link rel="stylesheet" href="../scss/style.css">
  <link rel="stylesheet" href="../scss/style.css">
  <title>
    <%- title %>
  </title>
</head>

<body>
  <!-- navbar -->
  <header>
    <nav class="navbar navbar-expand-sm navbar-dark">
      <a class="navbar-brand" href="/">UEA+<strong> MySpace</strong></a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup"
        aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
        <div class="navbar-nav">
          <a class="nav-item nav-link" href="/">Home</a>
          <a class="nav-item nav-link" href="/login">Login</a>
          <a class="nav-item nav-link" href="/signup">Sign Up</a>
          <a class="nav-item nav-link" href="/myAccount">My Account</a>
          <a class="nav-item nav-link active" href="/admin">Admin</a>
        </div>
      </div>
      </div>
    </nav>
  </header>
  <main>
    <%- body %>
  </main>

  <!-- optional and required tags -->
  <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
    integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"
    integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"
    integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
    crossorigin="anonymous"></script>

  <script>
    //============================== Create Booking Object ==================================
    class Booking {
      constructor(name, phoneNumber, email, time, duration) {
        this.name = name;
        this.phoneNumber = phoneNumber;
        this.email = email;
        this.time = time;
        this.laneNumber = 0;
        this.duration = duration;
      }
    }
    //============================== Create Booking Object ==================================


    //============================== Create INFO ==================================
    //Array of bookings. Note: this will be supplied by the back end server
    let array = [
      new Booking("caleb ", "07534877339", "calebadeyemo2@gmail.com", 0, 2),
      new Booking("caleb var", "07534877339", "calebadeyemo2@gmail.com", 0, 2),
      new Booking("Rosette", "07934877339", "Rosette@gmail.com", 1, 2),
      new Booking("kieran", "07934877339", "kieran@gmail.com", 6, 3),
      new Booking("Chidz", "07934877339", "Chidz@gmail.com", 3, 4),
      new Booking("Caleb", "07934877339", "Caleb@gmail.com", 10, 5),
      new Booking("Rose", "07934877339", "Rose@gmail.com", 10, 6),
      new Booking("Oba", "07934877339", "Oba@gmail.com", 3, 7),
      new Booking("Karan", "07934877339", "Karan@gmail.com", 6, 8),
      new Booking("Jass", "07934877339", "Jass@gmail.com", 6, 9),
      new Booking("Lewis", "07934877339", "Lewis@gmail.com", 6, 10),
      new Booking("Harpreet", "07934877339", "Harpreet@gmail.com", 21, 3),
      new Booking("Lucas", "07934877339", "Lucas@gmail.com", 10, 4),
      new Booking("Alice", "07934877339", "Alice@gmail.com", 3, 5),
      new Booking("Koyin", "07934877339", "Koyin@gmail.com", 6, 7),
      new Booking("Uche1", "07934877339", "Uche@gmail.com", 3, 3),
      new Booking("Uche", "07934877339", "Uche@gmail.com", 23, 2),
      new Booking("Uche2", "07934877339", "Uche2@gmail.com", 23, 5),
      new Booking("Uche3", "07934877339", "Uche3@gmail.com", 4, 2),
      new Booking("test", "07934877339", "Uche3@gmail.com", 4, 3),
      new Booking("test5", "07934877339", "Uche3@gmail.com", 6, 2),
    ]


    //============================== Get DOM elements ==================================
    //Get spaces
    let spaces = document.querySelectorAll(".space");
    //Get display screen
    let infoName = document.getElementById("info_name");
    let infoNumber = document.getElementById("info_number");
    let infoEmail = document.getElementById("info_email");
    //Get Form
    let form = document.getElementById("info_block");
    let radio = document.getElementsByClassName("radio");
    //Get submit button
    let submitButton = document.getElementById("submit");
    //hide extra form input
    form.elements.store.style.visibility = "hidden";


    //============================== Add booking ==================================
    function addBooking(obj, timeVariable, addLaneNumber, duration) {
      obj.laneNumber = addLaneNumber;
      obj.duration = duration;
      //append first div with the name of the booking
      spaces[timeVariable].innerHTML = `<div>${obj.name}</div><div class="booking" id="${obj.time}">${JSON.stringify(obj)}</div>`;
      //change color of field
      spaces[timeVariable].style.backgroundColor = 'lightblue';
      //remove border bellow first field
      spaces[timeVariable].style.borderBottom = "none";
      for (let i = 1; i < duration; i++) {
        //append div to space 
        spaces[timeVariable + i].innerHTML = `<div></div><div class="booking" id="${obj.time}">${JSON.stringify(obj)}</div>`;
        //change color of field
        spaces[timeVariable + i].style.backgroundColor = 'lightblue';
        //remove border arround fields
        spaces[timeVariable + i].style.borderTop = "none";
        spaces[timeVariable + i].style.borderBottom = "none";
      }
      // //add border to the last field
      spaces[timeVariable + (duration - 1)].style.borderBottom = "1px solid black";

    }


    //============================== Refresh all Booings  ==================================
    // clears all previous info
    function refresh() {
      spaces.forEach(space => {
        space.innerHTML = "";
        space.style.backgroundColor = "rgb(214, 214, 214)";
        space.style.border = "1px solid black";
      })
    }

    //============================== Check for no colisions  =======================
    function checkUnder(timeVariable, duration) {
      let int = 0;
      //loop the number of durations 
      for (let i = 0; i < duration; i++) {
        // check to see if space is empty
        if (spaces[timeVariable + i].innerHTML == ``) {
          //increment int
          int++
        }
      }
      if (int == duration) {
        return false;
      }
      else {
        return true;
      }
    }


    //============================== Load Spaces ==================================
    function loadSpaces() {
      let dest = document.getElementById("myDropdown");
      let pickDest = document.getElementsByClassName("pickDest");

      let lot = pickDest[dest.selectedIndex].value;
      console.log("lot");
      console.log(lot);
      //============================== Create Request ==================================
      const xhttp = new XMLHttpRequest();

      xhttp.open("POST", "/admin", true);

      xhttp.setRequestHeader("Accept", "application/json");
      xhttp.setRequestHeader('Content-type', 'application/json');

      xhttp.onload = function () {
        console.log(this.responseText);
      }
    var arrivalDate = document.getElementById("arriveDate");

      let startDate = new Date(arrivalDate.value); // format date object
      startDate.setHours(0,0,0);
      let start = startDate.getTime()

      let endDate = new Date(arrivalDate.value); // format date object
      endDate.setHours(startDate.getHours() + 23);
      let end  = endDate.getTime()

      let req = {
        LOT: lot,
        KEYS: ["A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9"],
        START: start,
        END: end
      }
      console.log("request");
      console.log(req);
      // Request data to send 
      xhttp.send(JSON.stringify(req));
      //============================== Create Request ==================================

      //Delete all the bookings currently loadded 
      refresh()

      //Loop through the array and load all the newly added bookings in there
      array.forEach(booking => {
        // Number to be used as index for class "spaces", i.e spaces[timeVariable],...
        // ...starts @ arrival time and incremented by 24 to go to the next lane.
        let timeVariable = booking.time

        // the lane number of the booking
        let lane_no = 0

        // while there is a abooking in the current position || there isn't space for the duration under
        while (checkUnder(timeVariable, booking.duration)) {
          //increment to go to the next lane
          timeVariable += 24;
          //update lane number to the next lane
          lane_no++; //check max 10
        }

        // add booking
        addBooking(booking, timeVariable, lane_no, booking.duration);
      })
    }
    loadSpaces()


    //============================== Move Bookings ==================================
    function moveBooking() {
      document.querySelector('form').addEventListener('submit', (e) => {
        //Get form information and put into an Object
        const data = Object.fromEntries(new FormData(e.target).entries());
        // put info form object into variables
        let timeVariable = parseInt(data.arrival);
        let arrival = JSON.parse(data.store).time;
        let laneNumber = JSON.parse(data.store).laneNumber;
        //increment by 24 to go to next lane; do this how many time the lane number specified is
        for (let i = 0; i < data.active_lot; i++) {
          timeVariable += 24;
        }
        // console.log(spaces[timeVariable + 1].childNodes[1].innerHTML)

        const check = checkUnder(timeVariable, JSON.parse(data.store).duration)
        if (check == false) {
          //Create new booking Object to be added to table
          let booking = new Booking(data.name, data.phoneNumber, data.email, data.arrival)

          //Add booking        
          addBooking(booking, timeVariable, data.active_lot, JSON.parse(data.store).duration);
          //Delete previous booking
          deleteBooking(arrival, laneNumber, JSON.parse(data.store).duration)
        }
        else {
          console.log("no space")
        }

        //Call loadSpaces()
        loadSpaces()

        //stop form from reloading the page
        e.preventDefault();
        e.stopImmediatePropagation()

        //Reset the form inputs to be empty
        form.reset()
      });
    }


    //============================== Delete bookings ==================================
    function deleteBooking(time, laneNumber, duration) {
      let timeVariable = parseInt(time);
      // go to the lane where the bookng is 
      for (let i = 0; i < laneNumber; i++) {
        timeVariable += 24;
      }
      for (let i = 0; i < duration; i++) {
        spaces[timeVariable + i].style.backgroundColor = "rgb(214, 214, 214)";
        spaces[timeVariable + i].innerHTML = ""
        // //add border to the fields
        spaces[timeVariable + i].style.border = "1px solid black";
      }

    }


    //============================== Display info to info screen ==================================
    spaces.forEach(space => {
      space.addEventListener('click', event => {
        if (space.firstChild != null) { //If booking space is not empty
          let obj = JSON.parse(space.childNodes[1].innerHTML);
          // console.log(obj)
          form.elements.name.value = obj.name;
          form.elements.phoneNumber.value = obj.phoneNumber;
          form.elements.email.value = obj.email;
          form.elements.arrival.value = obj.time;
          radio[obj.laneNumber].checked = true;
          form.elements.store.value = JSON.stringify(obj);
        }
        else { //Display nothing if space is empty 
          form.elements.name.value = "";
          form.elements.phoneNumber.value = ``;
          form.elements.email.value = "";
          form.elements.arrival.value = null;
          $('.radio').prop('checked', false)
          form.elements.store.value = "";
        }
      })
    })


    //============================== Display Drop-down Links ==================================
    function displayLinks() {
      //Get drop-down links
      let links = document.getElementById("myDropdown").classList.toggle("show");
      // Close the dropdown menu if the user clicks outside of it
      window.onclick = function (event) {
        if (!event.target.matches('.dropbtn')) {
          var dropdowns = document.getElementsByClassName("dropdown-content");
          var i;
          for (i = 0; i < dropdowns.length; i++) {
            var openDropdown = dropdowns[i];
            if (openDropdown.classList.contains('show')) {
              openDropdown.classList.remove('show');
            }
          }
        }
      }
    }
  </script>
</body>

</html>
